
int get_GOT(const char* elfFile){
    fprintf(stderr, "elfFile= %s\n", elfFile);

    ElfW(Ehdr) header;
    ElfW(Addr) main_addr;
    ElfW(Sym)* symbol_table;
    ElfW(Addr) *got_table, *string_table;
    ElfW(Addr) symbol_addr;
    char *symbol_name;

    FILE* file = fopen(elfFile, "rb");
    if(!file) {
        fprintf(stderr, "elf file not open\n");
        return -1;
    }
    fread(&header, sizeof(header), 1, file);
    if (memcmp(header.e_ident, ELFMAG, SELFMAG) != 0) {
        // this is not a valid elf file
        fprintf(stderr, "this is not a valid elf file\n");
        fclose(file);
        return -1;
    }

    // Get main address
    main_addr = header.e_entry;
    fprintf(stderr, "main_addr= %p\n",(void*)main_addr);
    
    fprintf(stderr, "   header.e_shnum= %x\n",header.e_shnum);
    fprintf(stderr, "   header.e_shoff= %lx\n",header.e_shoff);
    fprintf(stderr, "   SEEK_SET= %x\n",SEEK_SET);
    
    // Get symbol table and string table addresses
    ElfW(Shdr)* shdr = (ElfW(Shdr)*) malloc(sizeof(ElfW(Shdr)) * header.e_shnum);
    fseek(file, header.e_shoff, SEEK_SET);
    fread(shdr, sizeof(ElfW(Shdr)), header.e_shnum, file);
    symbol_addr = shdr[header.e_shstrndx].sh_offset;
    fprintf(stderr, "   header.e_shstrndx= %d\n",header.e_shstrndx);
    fprintf(stderr, "   symbol_addr= %p\n",(void*)symbol_addr);

    fprintf(stderr, "shdr= \n");
    for(int i = 0;i < header.e_shnum; i++){
        fprintf(stderr, "       shdr[%d].sh_offset= 0x%lx\n", i,shdr[i].sh_offset);
        fprintf(stderr, "       shdr[%d].sh_type= 0x%x\n", i,shdr[i].sh_type);
        fprintf(stderr, "       shdr[%d].sh_link= 0x%x\n", i,shdr[i].sh_link);
        fprintf(stderr, "       shdr[%d].sh_name= 0x%d\n", i,shdr[i].sh_name);
        fprintf(stderr, "       shdr[%d].sh_size= 0x%ld\n", i,shdr[i].sh_size);
        fprintf(stderr, "\n");
        //fprintf(stderr, "       header.e_shstrndx= 0x%d\n", i,shdr[i].sh_name);
    }

    fprintf(stderr, "   SHT_SYMTAB= %d\n", SHT_SYMTAB);
    fprintf(stderr, "   SHT_STRTAB= %d\n", SHT_STRTAB);

    symbol_table = NULL;
    string_table = NULL;
    int str_i = 0;
    for (int i = 0; i < header.e_shnum; i++) {
        if (shdr[i].sh_type == SHT_STRTAB) {
            string_table = (ElfW(Addr)*)(shdr[i].sh_offset);
            str_i = i;
            break;
        }
        /*if (shdr[i].sh_type == SHT_SYMTAB) {
            symbol_table = (ElfW(Sym)*)(shdr[i].sh_offset);
            string_table = (ElfW(Addr)*)(shdr[shdr[i].sh_link].sh_offset);
            break;
        }*/
    }
    /*if(symbol_table == NULL){
        fprintf(stderr, "symbol_table not found\n");
        fclose(file);
        return -1;
    }*/
    if(string_table == NULL){
        fprintf(stderr, "string_table not found\n");
        fclose(file);
        return -1;
    }
        fprintf(stderr, "       str_i= %d\n", str_i);

    char *str_table = (char *)malloc(shdr[str_i].sh_size);
    fseek(file, shdr[str_i].sh_offset, SEEK_SET);
    fread(str_table, shdr[str_i].sh_size, 1, file);
    fprintf(stderr, "String table offset: 0x%lx, size: %lu\n", shdr[str_i].sh_offset, shdr[str_i].sh_size);
    fprintf(stderr, "str_table: %s\n", str_table);

    fprintf(stderr, "string_table end\n");


    /*
    // Find GOT addresses and corresponding symbols
    //printf("%-12s %-10s %-10s\n", "Func", "GOT Offset", "Symbol Offset");
    printf("%-10s\n", "GOT Offset");
    for (int i = 0; i < header.e_shnum; i++) {
        if (shdr[i].sh_type == SHT_PROGBITS && shdr[i].sh_flags == SHF_ALLOC) {
            got_table = (ElfW(Addr)*)(shdr[i].sh_addr);
            for (int j = 0; j < shdr[i].sh_size/sizeof(ElfW(Addr)); j++) {
                if (got_table[j] != 0) {
                    //symbol_name = (char*)(string_table + symbol_table[ELF32_R_SYM(got_table[j])].st_name);
                    //ElfW(Addr) offset = get_symbol_offset(symbol_table, shdr[shdr[symbol_table[ELF64_R_SYM(got_table[j])].st_shndx].sh_link].sh_size/sizeof(ElfW(Sym)), ELF64_R_SYM(got_table[j]));
                    //printf("%-12s %010lx\n", symbol_name, shdr[i].sh_addr + j*sizeof(ElfW(Addr)));// %010lx, offset
                    printf("%010lx\n", shdr[i].sh_addr + j*sizeof(ElfW(Addr)));// %010lx, offset
                }
            }
        }
    }*/

    fclose(file);
    return 0;
}